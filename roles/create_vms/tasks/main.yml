---
# Step 1: Check if the VM already exists
- name: Check if the VM already exists
  community.general.proxmox_kvm:
    api_host: "{{ PROXMOX_API_HOST }}"
    api_user: "{{ PROXMOX_API_USERNAME }}"
    api_password: "{{ PROXMOX_API_PASSWORD }}"
    node: "{{ PROXMOX_NODE }}"
    name: "{{ MACHINE_NAME }}"
    state: current
  register: vm_info
  failed_when: false
  changed_when: false

# Step 2: Verify if VM exists based on the result
- name: Verify if VM exists
  set_fact:
    vm_exists: "{{ vm_info.msg is not search('does not exist') }}"

# Step 3: Debug VM existence status
- name: Debug VM existence status
  debug:
    msg:
      - "VM exists: {{ vm_exists }}"
      - "VM info: {{ vm_info }}"

# Step 4: Include create_vm.yml if VM does not exist
- name: Include create_vm.yml
  include_tasks: ../roles/create_vms/tasks/create_vm.yml
  when: not vm_exists

# Step 5: Include network_config.yml if VM exists or was cloned
- name: Include network_config.yml
  include_tasks: ../roles/create_vms/tasks/network_config.yml
  when: vm_exists or (cloned_vm is defined and cloned_vm is not skipped)

# Step 6: Include server_config.yml if VM exists or was cloned
- name: Include server_config.yml
  include_tasks: ../roles/create_vms/tasks/server_config.yml
  when: vm_exists or (cloned_vm is defined and cloned_vm is not skipped)

# Step 7: Fetch the status of the VM
- name: Fetch the status of the VM
  community.general.proxmox_kvm:
    api_host: "{{ PROXMOX_API_HOST }}"
    api_user: "{{ PROXMOX_API_USERNAME }}"
    api_password: "{{ PROXMOX_API_PASSWORD }}"
    node: "{{ PROXMOX_NODE }}"
    name: "{{ MACHINE_NAME }}"
    state: current
  register: vm_status
  failed_when: false
  changed_when: false

# Step 8: Debug VM status
- name: Debug VM status
  debug:
    msg:
      - "VM current status: {{ vm_status.status }}"
      - "Full VM status: {{ vm_status }}"

# Step 9: Include start_vm.yml if VM is not running
- name: Include start_vm.yml
  include_tasks: ../roles/create_vms/tasks/start_vm.yml
  when:
    - vm_status is defined
    - vm_status.status != "running"
